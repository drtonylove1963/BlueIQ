/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using BlueIQ.Api.Server.Converters;

namespace BlueIQ.Api.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkflowInstance : IEquatable<WorkflowInstance>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>123e4567-e89b-12d3-a456-426614174000</example> */
        [DataMember(Name="id", EmitDefaultValue=true)]
        public Guid Id { get; set; }

        /// <summary>
        /// ID of the WorkflowDefinition this instance is based on.
        /// </summary>
        /// <value>ID of the WorkflowDefinition this instance is based on.</value>
        /* <example>a1b2c3d4-e5f6-7890-1234-567890abcdef</example> */
        [Required]
        [DataMember(Name="workflowDefinitionId", EmitDefaultValue=true)]
        public Guid WorkflowDefinitionId { get; set; }

        /// <summary>
        /// Version of the WorkflowDefinition used for this instance.
        /// </summary>
        /// <value>Version of the WorkflowDefinition used for this instance.</value>
        /* <example>1.0.0</example> */
        [DataMember(Name="workflowDefinitionVersion", EmitDefaultValue=false)]
        public string WorkflowDefinitionVersion { get; set; }


        /// <summary>
        /// Current status of the workflow instance.
        /// </summary>
        /// <value>Current status of the workflow instance.</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum RunningEnum for running
            /// </summary>
            [EnumMember(Value = "running")]
            RunningEnum = 1,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 2,
            
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 3,
            
            /// <summary>
            /// Enum SuspendedEnum for suspended
            /// </summary>
            [EnumMember(Value = "suspended")]
            SuspendedEnum = 4,
            
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 5,
            
            /// <summary>
            /// Enum PendingRetryEnum for pending_retry
            /// </summary>
            [EnumMember(Value = "pending_retry")]
            PendingRetryEnum = 6
        }

        /// <summary>
        /// Current status of the workflow instance.
        /// </summary>
        /// <value>Current status of the workflow instance.</value>
        /* <example>running</example> */
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// ID of the current step the instance is waiting on or executing.
        /// </summary>
        /// <value>ID of the current step the instance is waiting on or executing.</value>
        /* <example>c1b2a3d4-e5f6-7890-1234-567890abcdef</example> */
        [DataMember(Name="currentStepId", EmitDefaultValue=true)]
        public Guid? CurrentStepId { get; set; }

        /// <summary>
        /// Key-value pairs of variables associated with this workflow instance.
        /// </summary>
        /// <value>Key-value pairs of variables associated with this workflow instance.</value>
        /* <example>{&quot;documentId&quot;:&quot;doc-xyz-123&quot;,&quot;approvedBy&quot;:null}</example> */
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public Dictionary<string, Object> Variables { get; set; }

        /// <summary>
        /// Gets or Sets StartedAt
        /// </summary>
        /* <example>2023-03-01T10:00Z</example> */
        [DataMember(Name="startedAt", EmitDefaultValue=true)]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2023-03-01T10:05Z</example> */
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets EndedAt
        /// </summary>
        /* <example>2023-03-02T14:30Z</example> */
        [DataMember(Name="endedAt", EmitDefaultValue=true)]
        public DateTime? EndedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  WorkflowDefinitionId: ").Append(WorkflowDefinitionId).Append("\n");
            sb.Append("  WorkflowDefinitionVersion: ").Append(WorkflowDefinitionVersion).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CurrentStepId: ").Append(CurrentStepId).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  EndedAt: ").Append(EndedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkflowInstance)obj);
        }

        /// <summary>
        /// Returns true if WorkflowInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowInstance other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    WorkflowDefinitionId == other.WorkflowDefinitionId ||
                    
                    WorkflowDefinitionId.Equals(other.WorkflowDefinitionId)
                ) && 
                (
                    WorkflowDefinitionVersion == other.WorkflowDefinitionVersion ||
                    WorkflowDefinitionVersion != null &&
                    WorkflowDefinitionVersion.Equals(other.WorkflowDefinitionVersion)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    CurrentStepId == other.CurrentStepId ||
                    CurrentStepId != null &&
                    CurrentStepId.Equals(other.CurrentStepId)
                ) && 
                (
                    Variables == other.Variables ||
                    Variables != null &&
                    other.Variables != null &&
                    Variables.SequenceEqual(other.Variables)
                ) && 
                (
                    StartedAt == other.StartedAt ||
                    
                    StartedAt.Equals(other.StartedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    EndedAt == other.EndedAt ||
                    EndedAt != null &&
                    EndedAt.Equals(other.EndedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + WorkflowDefinitionId.GetHashCode();
                    if (WorkflowDefinitionVersion != null)
                    hashCode = hashCode * 59 + WorkflowDefinitionVersion.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (CurrentStepId != null)
                    hashCode = hashCode * 59 + CurrentStepId.GetHashCode();
                    if (Variables != null)
                    hashCode = hashCode * 59 + Variables.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (EndedAt != null)
                    hashCode = hashCode * 59 + EndedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkflowInstance left, WorkflowInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkflowInstance left, WorkflowInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
