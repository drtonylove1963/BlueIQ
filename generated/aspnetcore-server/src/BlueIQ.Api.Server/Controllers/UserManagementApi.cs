/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using BlueIQ.Api.Server.Attributes;
using BlueIQ.Api.Server.Models;

namespace BlueIQ.Api.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserManagementApiController : ControllerBase
    { 
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>Creates a new user account. Requires username, email, and password. Optional fields include first name, last name, and role assignments.</remarks>
        /// <param name="createUserRequest">User object to be created</param>
        /// <response code="201">User created successfully</response>
        /// <response code="400">Invalid input</response>
        /// <response code="401">Unauthorized - Authentication token is missing or invalid.</response>
        /// <response code="403">Forbidden - User does not have permission to access this resource.</response>
        /// <response code="409">User already exists</response>
        /// <response code="500">Internal Server Error - An unexpected error occurred on the server.</response>
        [HttpPost]
        [Route("/api/v1/users")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateUser")]
        [SwaggerResponse(statusCode: 201, type: typeof(User), description: "User created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid input")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized - Authentication token is missing or invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden - User does not have permission to access this resource.")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "User already exists")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error - An unexpected error occurred on the server.")]
        public virtual IActionResult CreateUser([FromBody]CreateUserRequest createUserRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"firstName\" : \"John\",\r\n  \"lastName\" : \"Doe\",\r\n  \"createdAt\" : \"2023-01-15T10:30:00Z\",\r\n  \"roleIds\" : [ \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" ],\r\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\r\n  \"isActive\" : true,\r\n  \"email\" : \"johndoe@example.com\",\r\n  \"username\" : \"johndoe\",\r\n  \"updatedAt\" : \"2023-01-16T12:45:00Z\"\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a user by ID
        /// </summary>
        /// <remarks>Deletes a specific user account by their unique ID. This operation is typically irreversible.</remarks>
        /// <param name="userId">ID of the user to delete</param>
        /// <response code="204">User deleted successfully</response>
        /// <response code="401">Unauthorized - Authentication token is missing or invalid.</response>
        /// <response code="403">Forbidden - User does not have permission to access this resource.</response>
        /// <response code="404">Not Found - The requested resource could not be found.</response>
        /// <response code="500">Internal Server Error - An unexpected error occurred on the server.</response>
        [HttpDelete]
        [Route("/api/v1/users/{userId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DeleteUser")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized - Authentication token is missing or invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden - User does not have permission to access this resource.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found - The requested resource could not be found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error - An unexpected error occurred on the server.")]
        public virtual IActionResult DeleteUser([FromRoute (Name = "userId")][Required]Guid userId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a user by ID
        /// </summary>
        /// <remarks>Retrieves the details of a specific user account by their unique ID.</remarks>
        /// <param name="userId">ID of the user to retrieve</param>
        /// <response code="200">Successful operation</response>
        /// <response code="401">Unauthorized - Authentication token is missing or invalid.</response>
        /// <response code="403">Forbidden - User does not have permission to access this resource.</response>
        /// <response code="404">Not Found - The requested resource could not be found.</response>
        /// <response code="500">Internal Server Error - An unexpected error occurred on the server.</response>
        [HttpGet]
        [Route("/api/v1/users/{userId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetUserById")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Successful operation")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized - Authentication token is missing or invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden - User does not have permission to access this resource.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found - The requested resource could not be found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error - An unexpected error occurred on the server.")]
        public virtual IActionResult GetUserById([FromRoute (Name = "userId")][Required]Guid userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"firstName\" : \"John\",\r\n  \"lastName\" : \"Doe\",\r\n  \"createdAt\" : \"2023-01-15T10:30:00Z\",\r\n  \"roleIds\" : [ \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" ],\r\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\r\n  \"isActive\" : true,\r\n  \"email\" : \"johndoe@example.com\",\r\n  \"username\" : \"johndoe\",\r\n  \"updatedAt\" : \"2023-01-16T12:45:00Z\"\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>Retrieves a paginated list of all user accounts. Supports query parameters for pagination.</remarks>
        /// <param name="page">Page number for pagination</param>
        /// <param name="pageSize">Number of users per page</param>
        /// <response code="200">A list of users</response>
        /// <response code="401">Unauthorized - Authentication token is missing or invalid.</response>
        /// <response code="403">Forbidden - User does not have permission to access this resource.</response>
        /// <response code="500">Internal Server Error - An unexpected error occurred on the server.</response>
        [HttpGet]
        [Route("/api/v1/users")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ListUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserListResponse), description: "A list of users")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized - Authentication token is missing or invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden - User does not have permission to access this resource.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error - An unexpected error occurred on the server.")]
        public virtual IActionResult ListUsers([FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"pagination\" : {\r\n    \"totalItems\" : 100,\r\n    \"totalPages\" : 5,\r\n    \"pageSize\" : 20,\r\n    \"currentPage\" : 1\r\n  },\r\n  \"users\" : [ {\r\n    \"firstName\" : \"John\",\r\n    \"lastName\" : \"Doe\",\r\n    \"createdAt\" : \"2023-01-15T10:30:00Z\",\r\n    \"roleIds\" : [ \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" ],\r\n    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\r\n    \"isActive\" : true,\r\n    \"email\" : \"johndoe@example.com\",\r\n    \"username\" : \"johndoe\",\r\n    \"updatedAt\" : \"2023-01-16T12:45:00Z\"\r\n  }, {\r\n    \"firstName\" : \"John\",\r\n    \"lastName\" : \"Doe\",\r\n    \"createdAt\" : \"2023-01-15T10:30:00Z\",\r\n    \"roleIds\" : [ \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" ],\r\n    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\r\n    \"isActive\" : true,\r\n    \"email\" : \"johndoe@example.com\",\r\n    \"username\" : \"johndoe\",\r\n    \"updatedAt\" : \"2023-01-16T12:45:00Z\"\r\n  } ]\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserListResponse>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>Updates an existing user&#39;s account details. Allows modification of email, names, active status, and role assignments.</remarks>
        /// <param name="userId">ID of the user to update</param>
        /// <param name="updateUserRequest">User object to be updated</param>
        /// <response code="200">User updated successfully</response>
        /// <response code="400">Invalid input</response>
        /// <response code="401">Unauthorized - Authentication token is missing or invalid.</response>
        /// <response code="403">Forbidden - User does not have permission to access this resource.</response>
        /// <response code="404">Not Found - The requested resource could not be found.</response>
        /// <response code="500">Internal Server Error - An unexpected error occurred on the server.</response>
        [HttpPut]
        [Route("/api/v1/users/{userId}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "User updated successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid input")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized - Authentication token is missing or invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden - User does not have permission to access this resource.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found - The requested resource could not be found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error - An unexpected error occurred on the server.")]
        public virtual IActionResult UpdateUser([FromRoute (Name = "userId")][Required]Guid userId, [FromBody]UpdateUserRequest updateUserRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);
            string exampleJson = null;
            exampleJson = "{\r\n  \"firstName\" : \"John\",\r\n  \"lastName\" : \"Doe\",\r\n  \"createdAt\" : \"2023-01-15T10:30:00Z\",\r\n  \"roleIds\" : [ \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" ],\r\n  \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\r\n  \"isActive\" : true,\r\n  \"email\" : \"johndoe@example.com\",\r\n  \"username\" : \"johndoe\",\r\n  \"updatedAt\" : \"2023-01-16T12:45:00Z\"\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            exampleJson = "{\r\n  \"details\" : \"The 'username' field is required.\",\r\n  \"message\" : \"Invalid input provided.\",\r\n  \"statusCode\" : 400\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
