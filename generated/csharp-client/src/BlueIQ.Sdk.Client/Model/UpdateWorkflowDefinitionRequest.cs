// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// UpdateWorkflowDefinitionRequest
    /// </summary>
    public partial class UpdateWorkflowDefinitionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWorkflowDefinitionRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="description">description</param>
        /// <param name="steps">The updated sequence of steps. This will replace the existing steps.</param>
        /// <param name="isActive">isActive</param>
        [JsonConstructor]
        public UpdateWorkflowDefinitionRequest(Option<string?> name = default, Option<string?> varVersion = default, Option<string?> description = default, Option<List<WorkflowDefinitionStep>?> steps = default, Option<bool?> isActive = default)
        {
            NameOption = name;
            VarVersionOption = varVersion;
            DescriptionOption = description;
            StepsOption = steps;
            IsActiveOption = isActive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>UpdatedContentReviewV2</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        /* <example>2.1</example> */
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Revised process for reviewing updated content, version 2.1.</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WorkflowDefinitionStep>?> StepsOption { get; private set; }

        /// <summary>
        /// The updated sequence of steps. This will replace the existing steps.
        /// </summary>
        /// <value>The updated sequence of steps. This will replace the existing steps.</value>
        [JsonPropertyName("steps")]
        public List<WorkflowDefinitionStep>? Steps { get { return this.StepsOption; } set { this.StepsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("isActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateWorkflowDefinitionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateWorkflowDefinitionRequest" />
    /// </summary>
    public class UpdateWorkflowDefinitionRequestJsonConverter : JsonConverter<UpdateWorkflowDefinitionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateWorkflowDefinitionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateWorkflowDefinitionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> varVersion = default;
            Option<string?> description = default;
            Option<List<WorkflowDefinitionStep>?> steps = default;
            Option<bool?> isActive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "steps":
                            steps = new Option<List<WorkflowDefinitionStep>?>(JsonSerializer.Deserialize<List<WorkflowDefinitionStep>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isActive":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateWorkflowDefinitionRequest.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class UpdateWorkflowDefinitionRequest.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class UpdateWorkflowDefinitionRequest.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class UpdateWorkflowDefinitionRequest.");

            return new UpdateWorkflowDefinitionRequest(name, varVersion, description, steps, isActive);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateWorkflowDefinitionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateWorkflowDefinitionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateWorkflowDefinitionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateWorkflowDefinitionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateWorkflowDefinitionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateWorkflowDefinitionRequest.NameOption.IsSet && updateWorkflowDefinitionRequest.Name == null)
                throw new ArgumentNullException(nameof(updateWorkflowDefinitionRequest.Name), "Property is required for class UpdateWorkflowDefinitionRequest.");

            if (updateWorkflowDefinitionRequest.VarVersionOption.IsSet && updateWorkflowDefinitionRequest.VarVersion == null)
                throw new ArgumentNullException(nameof(updateWorkflowDefinitionRequest.VarVersion), "Property is required for class UpdateWorkflowDefinitionRequest.");

            if (updateWorkflowDefinitionRequest.StepsOption.IsSet && updateWorkflowDefinitionRequest.Steps == null)
                throw new ArgumentNullException(nameof(updateWorkflowDefinitionRequest.Steps), "Property is required for class UpdateWorkflowDefinitionRequest.");

            if (updateWorkflowDefinitionRequest.NameOption.IsSet)
                writer.WriteString("name", updateWorkflowDefinitionRequest.Name);

            if (updateWorkflowDefinitionRequest.VarVersionOption.IsSet)
                writer.WriteString("version", updateWorkflowDefinitionRequest.VarVersion);

            if (updateWorkflowDefinitionRequest.DescriptionOption.IsSet)
                if (updateWorkflowDefinitionRequest.DescriptionOption.Value != null)
                    writer.WriteString("description", updateWorkflowDefinitionRequest.Description);
                else
                    writer.WriteNull("description");

            if (updateWorkflowDefinitionRequest.StepsOption.IsSet)
            {
                writer.WritePropertyName("steps");
                JsonSerializer.Serialize(writer, updateWorkflowDefinitionRequest.Steps, jsonSerializerOptions);
            }
            if (updateWorkflowDefinitionRequest.IsActiveOption.IsSet)
                writer.WriteBoolean("isActive", updateWorkflowDefinitionRequest.IsActiveOption.Value!.Value);
        }
    }
}
