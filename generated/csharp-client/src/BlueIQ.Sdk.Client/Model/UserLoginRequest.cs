// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// UserLoginRequest
    /// </summary>
    public partial class UserLoginRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLoginRequest" /> class.
        /// </summary>
        /// <param name="username">The user&#39;s username.</param>
        /// <param name="password">The user&#39;s password.</param>
        [JsonConstructor]
        public UserLoginRequest(string username, string password)
        {
            Username = username;
            Password = password;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The user&#39;s username.
        /// </summary>
        /// <value>The user&#39;s username.</value>
        /* <example>adminuser</example> */
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        /// The user&#39;s password.
        /// </summary>
        /// <value>The user&#39;s password.</value>
        /* <example>P@$$wOrd123!</example> */
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserLoginRequest {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserLoginRequest" />
    /// </summary>
    public class UserLoginRequestJsonConverter : JsonConverter<UserLoginRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserLoginRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserLoginRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> username = default;
            Option<string?> password = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!username.IsSet)
                throw new ArgumentException("Property is required for class UserLoginRequest.", nameof(username));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class UserLoginRequest.", nameof(password));

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class UserLoginRequest.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class UserLoginRequest.");

            return new UserLoginRequest(username.Value!, password.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserLoginRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userLoginRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserLoginRequest userLoginRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userLoginRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserLoginRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userLoginRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserLoginRequest userLoginRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userLoginRequest.Username == null)
                throw new ArgumentNullException(nameof(userLoginRequest.Username), "Property is required for class UserLoginRequest.");

            if (userLoginRequest.Password == null)
                throw new ArgumentNullException(nameof(userLoginRequest.Password), "Property is required for class UserLoginRequest.");

            writer.WriteString("username", userLoginRequest.Username);

            writer.WriteString("password", userLoginRequest.Password);
        }
    }
}
