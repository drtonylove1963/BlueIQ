// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// StartWorkflowInstanceRequest
    /// </summary>
    public partial class StartWorkflowInstanceRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StartWorkflowInstanceRequest" /> class.
        /// </summary>
        /// <param name="workflowDefinitionId">ID of the WorkflowDefinition to start an instance of.</param>
        /// <param name="variables">Initial variables to start the workflow instance with.</param>
        [JsonConstructor]
        public StartWorkflowInstanceRequest(Guid workflowDefinitionId, Option<Dictionary<string, Object>?> variables = default)
        {
            WorkflowDefinitionId = workflowDefinitionId;
            VariablesOption = variables;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the WorkflowDefinition to start an instance of.
        /// </summary>
        /// <value>ID of the WorkflowDefinition to start an instance of.</value>
        /* <example>a1b2c3d4-e5f6-7890-1234-567890abcdef</example> */
        [JsonPropertyName("workflowDefinitionId")]
        public Guid WorkflowDefinitionId { get; set; }

        /// <summary>
        /// Used to track the state of Variables
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> VariablesOption { get; private set; }

        /// <summary>
        /// Initial variables to start the workflow instance with.
        /// </summary>
        /// <value>Initial variables to start the workflow instance with.</value>
        /* <example>{&quot;documentId&quot;:&quot;doc-abc-789&quot;,&quot;submitterUserId&quot;:&quot;user-xyz-123&quot;}</example> */
        [JsonPropertyName("variables")]
        public Dictionary<string, Object>? Variables { get { return this.VariablesOption; } set { this.VariablesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StartWorkflowInstanceRequest {\n");
            sb.Append("  WorkflowDefinitionId: ").Append(WorkflowDefinitionId).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StartWorkflowInstanceRequest" />
    /// </summary>
    public class StartWorkflowInstanceRequestJsonConverter : JsonConverter<StartWorkflowInstanceRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="StartWorkflowInstanceRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StartWorkflowInstanceRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> workflowDefinitionId = default;
            Option<Dictionary<string, Object>?> variables = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "workflowDefinitionId":
                            workflowDefinitionId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "variables":
                            variables = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!workflowDefinitionId.IsSet)
                throw new ArgumentException("Property is required for class StartWorkflowInstanceRequest.", nameof(workflowDefinitionId));

            if (workflowDefinitionId.IsSet && workflowDefinitionId.Value == null)
                throw new ArgumentNullException(nameof(workflowDefinitionId), "Property is not nullable for class StartWorkflowInstanceRequest.");

            return new StartWorkflowInstanceRequest(workflowDefinitionId.Value!.Value!, variables);
        }

        /// <summary>
        /// Serializes a <see cref="StartWorkflowInstanceRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="startWorkflowInstanceRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StartWorkflowInstanceRequest startWorkflowInstanceRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, startWorkflowInstanceRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StartWorkflowInstanceRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="startWorkflowInstanceRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StartWorkflowInstanceRequest startWorkflowInstanceRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("workflowDefinitionId", startWorkflowInstanceRequest.WorkflowDefinitionId);

            if (startWorkflowInstanceRequest.VariablesOption.IsSet)
                if (startWorkflowInstanceRequest.VariablesOption.Value != null)
                {
                    writer.WritePropertyName("variables");
                    JsonSerializer.Serialize(writer, startWorkflowInstanceRequest.Variables, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("variables");
        }
    }
}
