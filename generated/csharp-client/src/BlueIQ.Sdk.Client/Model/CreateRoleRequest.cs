// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// CreateRoleRequest
    /// </summary>
    public partial class CreateRoleRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRoleRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="permissions">List of permissions for the new role.</param>
        [JsonConstructor]
        public CreateRoleRequest(string name, Option<string?> description = default, Option<List<string>?> permissions = default)
        {
            Name = name;
            DescriptionOption = description;
            PermissionsOption = permissions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Editor</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Can edit content.</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> PermissionsOption { get; private set; }

        /// <summary>
        /// List of permissions for the new role.
        /// </summary>
        /// <value>List of permissions for the new role.</value>
        /* <example>[&quot;content:edit&quot;,&quot;content:publish&quot;]</example> */
        [JsonPropertyName("permissions")]
        public List<string>? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateRoleRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateRoleRequest" />
    /// </summary>
    public class CreateRoleRequestJsonConverter : JsonConverter<CreateRoleRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateRoleRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateRoleRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> description = default;
            Option<List<string>?> permissions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "permissions":
                            permissions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateRoleRequest.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateRoleRequest.");

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions), "Property is not nullable for class CreateRoleRequest.");

            return new CreateRoleRequest(name.Value!, description, permissions);
        }

        /// <summary>
        /// Serializes a <see cref="CreateRoleRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createRoleRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateRoleRequest createRoleRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createRoleRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateRoleRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createRoleRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateRoleRequest createRoleRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createRoleRequest.Name == null)
                throw new ArgumentNullException(nameof(createRoleRequest.Name), "Property is required for class CreateRoleRequest.");

            if (createRoleRequest.PermissionsOption.IsSet && createRoleRequest.Permissions == null)
                throw new ArgumentNullException(nameof(createRoleRequest.Permissions), "Property is required for class CreateRoleRequest.");

            writer.WriteString("name", createRoleRequest.Name);

            if (createRoleRequest.DescriptionOption.IsSet)
                if (createRoleRequest.DescriptionOption.Value != null)
                    writer.WriteString("description", createRoleRequest.Description);
                else
                    writer.WriteNull("description");

            if (createRoleRequest.PermissionsOption.IsSet)
            {
                writer.WritePropertyName("permissions");
                JsonSerializer.Serialize(writer, createRoleRequest.Permissions, jsonSerializerOptions);
            }
        }
    }
}
