// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// Pagination
    /// </summary>
    public partial class Pagination : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pagination" /> class.
        /// </summary>
        /// <param name="totalItems">totalItems</param>
        /// <param name="totalPages">totalPages</param>
        /// <param name="currentPage">currentPage</param>
        /// <param name="pageSize">pageSize</param>
        [JsonConstructor]
        public Pagination(Option<int?> totalItems = default, Option<int?> totalPages = default, Option<int?> currentPage = default, Option<int?> pageSize = default)
        {
            TotalItemsOption = totalItems;
            TotalPagesOption = totalPages;
            CurrentPageOption = currentPage;
            PageSizeOption = pageSize;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TotalItems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalItems
        /// </summary>
        /* <example>100</example> */
        [JsonPropertyName("totalItems")]
        public int? TotalItems { get { return this.TotalItemsOption; } set { this.TotalItemsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalPages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalPagesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("totalPages")]
        public int? TotalPages { get { return this.TotalPagesOption; } set { this.TotalPagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrentPageOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentPage
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("currentPage")]
        public int? CurrentPage { get { return this.CurrentPageOption; } set { this.CurrentPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageSizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        /* <example>20</example> */
        [JsonPropertyName("pageSize")]
        public int? PageSize { get { return this.PageSizeOption; } set { this.PageSizeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Pagination {\n");
            sb.Append("  TotalItems: ").Append(TotalItems).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Pagination" />
    /// </summary>
    public class PaginationJsonConverter : JsonConverter<Pagination>
    {
        /// <summary>
        /// Deserializes json to <see cref="Pagination" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Pagination Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> totalItems = default;
            Option<int?> totalPages = default;
            Option<int?> currentPage = default;
            Option<int?> pageSize = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "totalItems":
                            totalItems = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "totalPages":
                            totalPages = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "currentPage":
                            currentPage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pageSize":
                            pageSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (totalItems.IsSet && totalItems.Value == null)
                throw new ArgumentNullException(nameof(totalItems), "Property is not nullable for class Pagination.");

            if (totalPages.IsSet && totalPages.Value == null)
                throw new ArgumentNullException(nameof(totalPages), "Property is not nullable for class Pagination.");

            if (currentPage.IsSet && currentPage.Value == null)
                throw new ArgumentNullException(nameof(currentPage), "Property is not nullable for class Pagination.");

            if (pageSize.IsSet && pageSize.Value == null)
                throw new ArgumentNullException(nameof(pageSize), "Property is not nullable for class Pagination.");

            return new Pagination(totalItems, totalPages, currentPage, pageSize);
        }

        /// <summary>
        /// Serializes a <see cref="Pagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Pagination pagination, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pagination, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Pagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Pagination pagination, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pagination.TotalItemsOption.IsSet)
                writer.WriteNumber("totalItems", pagination.TotalItemsOption.Value!.Value);

            if (pagination.TotalPagesOption.IsSet)
                writer.WriteNumber("totalPages", pagination.TotalPagesOption.Value!.Value);

            if (pagination.CurrentPageOption.IsSet)
                writer.WriteNumber("currentPage", pagination.CurrentPageOption.Value!.Value);

            if (pagination.PageSizeOption.IsSet)
                writer.WriteNumber("pageSize", pagination.PageSizeOption.Value!.Value);
        }
    }
}
