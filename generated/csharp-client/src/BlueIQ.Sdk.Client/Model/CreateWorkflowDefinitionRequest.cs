// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// CreateWorkflowDefinitionRequest
    /// </summary>
    public partial class CreateWorkflowDefinitionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWorkflowDefinitionRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="varVersion">varVersion</param>
        /// <param name="steps">steps</param>
        /// <param name="description">description</param>
        [JsonConstructor]
        public CreateWorkflowDefinitionRequest(string name, string varVersion, List<WorkflowDefinitionStep> steps, Option<string?> description = default)
        {
            Name = name;
            VarVersion = varVersion;
            Steps = steps;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>NewContentReview</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        /* <example>1.0</example> */
        [JsonPropertyName("version")]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [JsonPropertyName("steps")]
        public List<WorkflowDefinitionStep> Steps { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Process for reviewing newly submitted content.</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateWorkflowDefinitionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateWorkflowDefinitionRequest" />
    /// </summary>
    public class CreateWorkflowDefinitionRequestJsonConverter : JsonConverter<CreateWorkflowDefinitionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateWorkflowDefinitionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateWorkflowDefinitionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> varVersion = default;
            Option<List<WorkflowDefinitionStep>?> steps = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "steps":
                            steps = new Option<List<WorkflowDefinitionStep>?>(JsonSerializer.Deserialize<List<WorkflowDefinitionStep>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CreateWorkflowDefinitionRequest.", nameof(name));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class CreateWorkflowDefinitionRequest.", nameof(varVersion));

            if (!steps.IsSet)
                throw new ArgumentException("Property is required for class CreateWorkflowDefinitionRequest.", nameof(steps));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateWorkflowDefinitionRequest.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class CreateWorkflowDefinitionRequest.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class CreateWorkflowDefinitionRequest.");

            return new CreateWorkflowDefinitionRequest(name.Value!, varVersion.Value!, steps.Value!, description);
        }

        /// <summary>
        /// Serializes a <see cref="CreateWorkflowDefinitionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createWorkflowDefinitionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createWorkflowDefinitionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateWorkflowDefinitionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createWorkflowDefinitionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createWorkflowDefinitionRequest.Name == null)
                throw new ArgumentNullException(nameof(createWorkflowDefinitionRequest.Name), "Property is required for class CreateWorkflowDefinitionRequest.");

            if (createWorkflowDefinitionRequest.VarVersion == null)
                throw new ArgumentNullException(nameof(createWorkflowDefinitionRequest.VarVersion), "Property is required for class CreateWorkflowDefinitionRequest.");

            if (createWorkflowDefinitionRequest.Steps == null)
                throw new ArgumentNullException(nameof(createWorkflowDefinitionRequest.Steps), "Property is required for class CreateWorkflowDefinitionRequest.");

            writer.WriteString("name", createWorkflowDefinitionRequest.Name);

            writer.WriteString("version", createWorkflowDefinitionRequest.VarVersion);

            writer.WritePropertyName("steps");
            JsonSerializer.Serialize(writer, createWorkflowDefinitionRequest.Steps, jsonSerializerOptions);
            if (createWorkflowDefinitionRequest.DescriptionOption.IsSet)
                if (createWorkflowDefinitionRequest.DescriptionOption.Value != null)
                    writer.WriteString("description", createWorkflowDefinitionRequest.Description);
                else
                    writer.WriteNull("description");
        }
    }
}
