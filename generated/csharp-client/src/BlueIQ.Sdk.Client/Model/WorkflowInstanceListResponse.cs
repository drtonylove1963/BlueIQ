// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// WorkflowInstanceListResponse
    /// </summary>
    public partial class WorkflowInstanceListResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowInstanceListResponse" /> class.
        /// </summary>
        /// <param name="workflowInstances">workflowInstances</param>
        /// <param name="pagination">pagination</param>
        [JsonConstructor]
        public WorkflowInstanceListResponse(Option<List<WorkflowInstance>?> workflowInstances = default, Option<Pagination?> pagination = default)
        {
            WorkflowInstancesOption = workflowInstances;
            PaginationOption = pagination;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of WorkflowInstances
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WorkflowInstance>?> WorkflowInstancesOption { get; private set; }

        /// <summary>
        /// Gets or Sets WorkflowInstances
        /// </summary>
        [JsonPropertyName("workflowInstances")]
        public List<WorkflowInstance>? WorkflowInstances { get { return this.WorkflowInstancesOption; } set { this.WorkflowInstancesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pagination
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Pagination?> PaginationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [JsonPropertyName("pagination")]
        public Pagination? Pagination { get { return this.PaginationOption; } set { this.PaginationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowInstanceListResponse {\n");
            sb.Append("  WorkflowInstances: ").Append(WorkflowInstances).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WorkflowInstanceListResponse" />
    /// </summary>
    public class WorkflowInstanceListResponseJsonConverter : JsonConverter<WorkflowInstanceListResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="WorkflowInstanceListResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WorkflowInstanceListResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<WorkflowInstance>?> workflowInstances = default;
            Option<Pagination?> pagination = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "workflowInstances":
                            workflowInstances = new Option<List<WorkflowInstance>?>(JsonSerializer.Deserialize<List<WorkflowInstance>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pagination":
                            pagination = new Option<Pagination?>(JsonSerializer.Deserialize<Pagination>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (workflowInstances.IsSet && workflowInstances.Value == null)
                throw new ArgumentNullException(nameof(workflowInstances), "Property is not nullable for class WorkflowInstanceListResponse.");

            if (pagination.IsSet && pagination.Value == null)
                throw new ArgumentNullException(nameof(pagination), "Property is not nullable for class WorkflowInstanceListResponse.");

            return new WorkflowInstanceListResponse(workflowInstances, pagination);
        }

        /// <summary>
        /// Serializes a <see cref="WorkflowInstanceListResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workflowInstanceListResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WorkflowInstanceListResponse workflowInstanceListResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, workflowInstanceListResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WorkflowInstanceListResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workflowInstanceListResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WorkflowInstanceListResponse workflowInstanceListResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (workflowInstanceListResponse.WorkflowInstancesOption.IsSet && workflowInstanceListResponse.WorkflowInstances == null)
                throw new ArgumentNullException(nameof(workflowInstanceListResponse.WorkflowInstances), "Property is required for class WorkflowInstanceListResponse.");

            if (workflowInstanceListResponse.PaginationOption.IsSet && workflowInstanceListResponse.Pagination == null)
                throw new ArgumentNullException(nameof(workflowInstanceListResponse.Pagination), "Property is required for class WorkflowInstanceListResponse.");

            if (workflowInstanceListResponse.WorkflowInstancesOption.IsSet)
            {
                writer.WritePropertyName("workflowInstances");
                JsonSerializer.Serialize(writer, workflowInstanceListResponse.WorkflowInstances, jsonSerializerOptions);
            }
            if (workflowInstanceListResponse.PaginationOption.IsSet)
            {
                writer.WritePropertyName("pagination");
                JsonSerializer.Serialize(writer, workflowInstanceListResponse.Pagination, jsonSerializerOptions);
            }
        }
    }
}
