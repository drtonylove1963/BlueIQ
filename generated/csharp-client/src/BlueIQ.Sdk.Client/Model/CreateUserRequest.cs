// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// CreateUserRequest
    /// </summary>
    public partial class CreateUserRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserRequest" /> class.
        /// </summary>
        /// <param name="username">username</param>
        /// <param name="email">email</param>
        /// <param name="password">password</param>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="roleIds">List of role IDs to assign to the new user.</param>
        [JsonConstructor]
        public CreateUserRequest(string username, string email, string password, Option<string?> firstName = default, Option<string?> lastName = default, Option<List<Guid>?> roleIds = default)
        {
            Username = username;
            Email = email;
            Password = password;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            RoleIdsOption = roleIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        /* <example>newuser</example> */
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        /* <example>newuser@example.com</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        /* <example>Str0ngP@sswOrd!</example> */
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        /* <example>New</example> */
        [JsonPropertyName("firstName")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        /* <example>User</example> */
        [JsonPropertyName("lastName")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of RoleIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Guid>?> RoleIdsOption { get; private set; }

        /// <summary>
        /// List of role IDs to assign to the new user.
        /// </summary>
        /// <value>List of role IDs to assign to the new user.</value>
        /* <example>[&quot;f47ac10b-58cc-4372-a567-0e02b2c3d479&quot;]</example> */
        [JsonPropertyName("roleIds")]
        public List<Guid>? RoleIds { get { return this.RoleIdsOption; } set { this.RoleIdsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserRequest {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  RoleIds: ").Append(RoleIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Password (string) minLength
            if (this.Password != null && this.Password.Length < 8)
            {
                yield return new ValidationResult("Invalid value for Password, length must be greater than 8.", new [] { "Password" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateUserRequest" />
    /// </summary>
    public class CreateUserRequestJsonConverter : JsonConverter<CreateUserRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateUserRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateUserRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> username = default;
            Option<string?> email = default;
            Option<string?> password = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<List<Guid>?> roleIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "roleIds":
                            roleIds = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!username.IsSet)
                throw new ArgumentException("Property is required for class CreateUserRequest.", nameof(username));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class CreateUserRequest.", nameof(email));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class CreateUserRequest.", nameof(password));

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class CreateUserRequest.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class CreateUserRequest.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class CreateUserRequest.");

            if (roleIds.IsSet && roleIds.Value == null)
                throw new ArgumentNullException(nameof(roleIds), "Property is not nullable for class CreateUserRequest.");

            return new CreateUserRequest(username.Value!, email.Value!, password.Value!, firstName, lastName, roleIds);
        }

        /// <summary>
        /// Serializes a <see cref="CreateUserRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createUserRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateUserRequest createUserRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createUserRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateUserRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createUserRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateUserRequest createUserRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createUserRequest.Username == null)
                throw new ArgumentNullException(nameof(createUserRequest.Username), "Property is required for class CreateUserRequest.");

            if (createUserRequest.Email == null)
                throw new ArgumentNullException(nameof(createUserRequest.Email), "Property is required for class CreateUserRequest.");

            if (createUserRequest.Password == null)
                throw new ArgumentNullException(nameof(createUserRequest.Password), "Property is required for class CreateUserRequest.");

            if (createUserRequest.RoleIdsOption.IsSet && createUserRequest.RoleIds == null)
                throw new ArgumentNullException(nameof(createUserRequest.RoleIds), "Property is required for class CreateUserRequest.");

            writer.WriteString("username", createUserRequest.Username);

            writer.WriteString("email", createUserRequest.Email);

            writer.WriteString("password", createUserRequest.Password);

            if (createUserRequest.FirstNameOption.IsSet)
                if (createUserRequest.FirstNameOption.Value != null)
                    writer.WriteString("firstName", createUserRequest.FirstName);
                else
                    writer.WriteNull("firstName");

            if (createUserRequest.LastNameOption.IsSet)
                if (createUserRequest.LastNameOption.Value != null)
                    writer.WriteString("lastName", createUserRequest.LastName);
                else
                    writer.WriteNull("lastName");

            if (createUserRequest.RoleIdsOption.IsSet)
            {
                writer.WritePropertyName("roleIds");
                JsonSerializer.Serialize(writer, createUserRequest.RoleIds, jsonSerializerOptions);
            }
        }
    }
}
