// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BlueIQ.Sdk.Client.Client;

namespace BlueIQ.Sdk.Client.Model
{
    /// <summary>
    /// WorkflowDefinition
    /// </summary>
    public partial class WorkflowDefinition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowDefinition" /> class.
        /// </summary>
        /// <param name="name">Human-readable name for the workflow definition.</param>
        /// <param name="varVersion">Version of the workflow definition.</param>
        /// <param name="steps">The sequence of steps that define the workflow.</param>
        /// <param name="id">id</param>
        /// <param name="description">description</param>
        /// <param name="isActive">Whether this workflow definition is currently active and can be used to start new instances. (default to true)</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public WorkflowDefinition(string name, string varVersion, List<WorkflowDefinitionStep> steps, Option<Guid?> id = default, Option<string?> description = default, Option<bool?> isActive = default, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default)
        {
            Name = name;
            VarVersion = varVersion;
            Steps = steps;
            IdOption = id;
            DescriptionOption = description;
            IsActiveOption = isActive;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Human-readable name for the workflow definition.
        /// </summary>
        /// <value>Human-readable name for the workflow definition.</value>
        /* <example>DocumentApprovalProcess</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Version of the workflow definition.
        /// </summary>
        /// <value>Version of the workflow definition.</value>
        /* <example>1.0.0</example> */
        [JsonPropertyName("version")]
        public string VarVersion { get; set; }

        /// <summary>
        /// The sequence of steps that define the workflow.
        /// </summary>
        /// <value>The sequence of steps that define the workflow.</value>
        [JsonPropertyName("steps")]
        public List<WorkflowDefinitionStep> Steps { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>a1b2c3d4-e5f6-7890-1234-567890abcdef</example> */
        [JsonPropertyName("id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>A standard process for document review and approval.</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Whether this workflow definition is currently active and can be used to start new instances.
        /// </summary>
        /// <value>Whether this workflow definition is currently active and can be used to start new instances.</value>
        [JsonPropertyName("isActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2023-02-01T11:00Z</example> */
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2023-02-02T14:15Z</example> */
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WorkflowDefinition" />
    /// </summary>
    public class WorkflowDefinitionJsonConverter : JsonConverter<WorkflowDefinition>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WorkflowDefinition" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WorkflowDefinition Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> varVersion = default;
            Option<List<WorkflowDefinitionStep>?> steps = default;
            Option<Guid?> id = default;
            Option<string?> description = default;
            Option<bool?> isActive = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "steps":
                            steps = new Option<List<WorkflowDefinitionStep>?>(JsonSerializer.Deserialize<List<WorkflowDefinitionStep>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "isActive":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class WorkflowDefinition.", nameof(name));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class WorkflowDefinition.", nameof(varVersion));

            if (!steps.IsSet)
                throw new ArgumentException("Property is required for class WorkflowDefinition.", nameof(steps));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class WorkflowDefinition.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class WorkflowDefinition.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class WorkflowDefinition.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WorkflowDefinition.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class WorkflowDefinition.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WorkflowDefinition.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WorkflowDefinition.");

            return new WorkflowDefinition(name.Value!, varVersion.Value!, steps.Value!, id, description, isActive, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="WorkflowDefinition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workflowDefinition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WorkflowDefinition workflowDefinition, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, workflowDefinition, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WorkflowDefinition" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workflowDefinition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WorkflowDefinition workflowDefinition, JsonSerializerOptions jsonSerializerOptions)
        {
            if (workflowDefinition.Name == null)
                throw new ArgumentNullException(nameof(workflowDefinition.Name), "Property is required for class WorkflowDefinition.");

            if (workflowDefinition.VarVersion == null)
                throw new ArgumentNullException(nameof(workflowDefinition.VarVersion), "Property is required for class WorkflowDefinition.");

            if (workflowDefinition.Steps == null)
                throw new ArgumentNullException(nameof(workflowDefinition.Steps), "Property is required for class WorkflowDefinition.");

            writer.WriteString("name", workflowDefinition.Name);

            writer.WriteString("version", workflowDefinition.VarVersion);

            writer.WritePropertyName("steps");
            JsonSerializer.Serialize(writer, workflowDefinition.Steps, jsonSerializerOptions);
            if (workflowDefinition.IdOption.IsSet)
                writer.WriteString("id", workflowDefinition.IdOption.Value!.Value);

            if (workflowDefinition.DescriptionOption.IsSet)
                if (workflowDefinition.DescriptionOption.Value != null)
                    writer.WriteString("description", workflowDefinition.Description);
                else
                    writer.WriteNull("description");

            if (workflowDefinition.IsActiveOption.IsSet)
                writer.WriteBoolean("isActive", workflowDefinition.IsActiveOption.Value!.Value);

            if (workflowDefinition.CreatedAtOption.IsSet)
                writer.WriteString("createdAt", workflowDefinition.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (workflowDefinition.UpdatedAtOption.IsSet)
                writer.WriteString("updatedAt", workflowDefinition.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));
        }
    }
}
