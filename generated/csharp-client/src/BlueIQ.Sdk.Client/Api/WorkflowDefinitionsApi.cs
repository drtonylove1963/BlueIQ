// <auto-generated>
/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BlueIQ.Sdk.Client.Client;
using BlueIQ.Sdk.Client.Model;
using System.Diagnostics.CodeAnalysis;

namespace BlueIQ.Sdk.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWorkflowDefinitionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WorkflowDefinitionsApiEvents Events { get; }

        /// <summary>
        /// Create a new workflow definition
        /// </summary>
        /// <remarks>
        /// Creates a new workflow definition (template). Requires a name, version, and a list of steps.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkflowDefinitionRequest">Workflow definition object to be created</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWorkflowDefinitionApiResponse"/>&gt;</returns>
        Task<ICreateWorkflowDefinitionApiResponse> CreateWorkflowDefinitionAsync(CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new workflow definition
        /// </summary>
        /// <remarks>
        /// Creates a new workflow definition (template). Requires a name, version, and a list of steps.
        /// </remarks>
        /// <param name="createWorkflowDefinitionRequest">Workflow definition object to be created</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWorkflowDefinitionApiResponse"/>?&gt;</returns>
        Task<ICreateWorkflowDefinitionApiResponse?> CreateWorkflowDefinitionOrDefaultAsync(CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a workflow definition by ID
        /// </summary>
        /// <remarks>
        /// Deletes a specific workflow definition by its unique ID. This may affect the ability to start new workflow instances from this definition.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">ID of the workflow definition to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWorkflowDefinitionApiResponse"/>&gt;</returns>
        Task<IDeleteWorkflowDefinitionApiResponse> DeleteWorkflowDefinitionAsync(Guid definitionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a workflow definition by ID
        /// </summary>
        /// <remarks>
        /// Deletes a specific workflow definition by its unique ID. This may affect the ability to start new workflow instances from this definition.
        /// </remarks>
        /// <param name="definitionId">ID of the workflow definition to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWorkflowDefinitionApiResponse"/>?&gt;</returns>
        Task<IDeleteWorkflowDefinitionApiResponse?> DeleteWorkflowDefinitionOrDefaultAsync(Guid definitionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a workflow definition by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a specific workflow definition by its unique ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">ID of the workflow definition to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkflowDefinitionByIdApiResponse"/>&gt;</returns>
        Task<IGetWorkflowDefinitionByIdApiResponse> GetWorkflowDefinitionByIdAsync(Guid definitionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a workflow definition by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a specific workflow definition by its unique ID.
        /// </remarks>
        /// <param name="definitionId">ID of the workflow definition to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkflowDefinitionByIdApiResponse"/>?&gt;</returns>
        Task<IGetWorkflowDefinitionByIdApiResponse?> GetWorkflowDefinitionByIdOrDefaultAsync(Guid definitionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all workflow definitions
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of all available workflow definitions (templates). Supports query parameters for pagination.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1)</param>
        /// <param name="pageSize">Number of workflow definitions per page (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWorkflowDefinitionsApiResponse"/>&gt;</returns>
        Task<IListWorkflowDefinitionsApiResponse> ListWorkflowDefinitionsAsync(Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all workflow definitions
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of all available workflow definitions (templates). Supports query parameters for pagination.
        /// </remarks>
        /// <param name="page">Page number for pagination (optional, default to 1)</param>
        /// <param name="pageSize">Number of workflow definitions per page (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWorkflowDefinitionsApiResponse"/>?&gt;</returns>
        Task<IListWorkflowDefinitionsApiResponse?> ListWorkflowDefinitionsOrDefaultAsync(Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an existing workflow definition
        /// </summary>
        /// <remarks>
        /// Updates an existing workflow definition. Allows modification of name, version, description, steps, and active status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">ID of the workflow definition to update</param>
        /// <param name="updateWorkflowDefinitionRequest">Workflow definition object to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWorkflowDefinitionApiResponse"/>&gt;</returns>
        Task<IUpdateWorkflowDefinitionApiResponse> UpdateWorkflowDefinitionAsync(Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an existing workflow definition
        /// </summary>
        /// <remarks>
        /// Updates an existing workflow definition. Allows modification of name, version, description, steps, and active status.
        /// </remarks>
        /// <param name="definitionId">ID of the workflow definition to update</param>
        /// <param name="updateWorkflowDefinitionRequest">Workflow definition object to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWorkflowDefinitionApiResponse"/>?&gt;</returns>
        Task<IUpdateWorkflowDefinitionApiResponse?> UpdateWorkflowDefinitionOrDefaultAsync(Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateWorkflowDefinitionApiResponse"/>
    /// </summary>
    public interface ICreateWorkflowDefinitionApiResponse : BlueIQ.Sdk.Client.Client.IApiResponse, ICreated<BlueIQ.Sdk.Client.Model.WorkflowDefinition?>, IBadRequest<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IUnauthorized<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IForbidden<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IConflict<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IInternalServerError<BlueIQ.Sdk.Client.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteWorkflowDefinitionApiResponse"/>
    /// </summary>
    public interface IDeleteWorkflowDefinitionApiResponse : BlueIQ.Sdk.Client.Client.IApiResponse, IUnauthorized<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IForbidden<BlueIQ.Sdk.Client.Model.ErrorResponse?>, INotFound<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IInternalServerError<BlueIQ.Sdk.Client.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetWorkflowDefinitionByIdApiResponse"/>
    /// </summary>
    public interface IGetWorkflowDefinitionByIdApiResponse : BlueIQ.Sdk.Client.Client.IApiResponse, IOk<BlueIQ.Sdk.Client.Model.WorkflowDefinition?>, IUnauthorized<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IForbidden<BlueIQ.Sdk.Client.Model.ErrorResponse?>, INotFound<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IInternalServerError<BlueIQ.Sdk.Client.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IListWorkflowDefinitionsApiResponse"/>
    /// </summary>
    public interface IListWorkflowDefinitionsApiResponse : BlueIQ.Sdk.Client.Client.IApiResponse, IOk<BlueIQ.Sdk.Client.Model.WorkflowDefinitionListResponse?>, IUnauthorized<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IForbidden<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IInternalServerError<BlueIQ.Sdk.Client.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateWorkflowDefinitionApiResponse"/>
    /// </summary>
    public interface IUpdateWorkflowDefinitionApiResponse : BlueIQ.Sdk.Client.Client.IApiResponse, IOk<BlueIQ.Sdk.Client.Model.WorkflowDefinition?>, IBadRequest<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IUnauthorized<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IForbidden<BlueIQ.Sdk.Client.Model.ErrorResponse?>, INotFound<BlueIQ.Sdk.Client.Model.ErrorResponse?>, IInternalServerError<BlueIQ.Sdk.Client.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WorkflowDefinitionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateWorkflowDefinition;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateWorkflowDefinition;

        internal void ExecuteOnCreateWorkflowDefinition(WorkflowDefinitionsApi.CreateWorkflowDefinitionApiResponse apiResponse)
        {
            OnCreateWorkflowDefinition?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateWorkflowDefinition(Exception exception)
        {
            OnErrorCreateWorkflowDefinition?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteWorkflowDefinition;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteWorkflowDefinition;

        internal void ExecuteOnDeleteWorkflowDefinition(WorkflowDefinitionsApi.DeleteWorkflowDefinitionApiResponse apiResponse)
        {
            OnDeleteWorkflowDefinition?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteWorkflowDefinition(Exception exception)
        {
            OnErrorDeleteWorkflowDefinition?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWorkflowDefinitionById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWorkflowDefinitionById;

        internal void ExecuteOnGetWorkflowDefinitionById(WorkflowDefinitionsApi.GetWorkflowDefinitionByIdApiResponse apiResponse)
        {
            OnGetWorkflowDefinitionById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWorkflowDefinitionById(Exception exception)
        {
            OnErrorGetWorkflowDefinitionById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListWorkflowDefinitions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListWorkflowDefinitions;

        internal void ExecuteOnListWorkflowDefinitions(WorkflowDefinitionsApi.ListWorkflowDefinitionsApiResponse apiResponse)
        {
            OnListWorkflowDefinitions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListWorkflowDefinitions(Exception exception)
        {
            OnErrorListWorkflowDefinitions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateWorkflowDefinition;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateWorkflowDefinition;

        internal void ExecuteOnUpdateWorkflowDefinition(WorkflowDefinitionsApi.UpdateWorkflowDefinitionApiResponse apiResponse)
        {
            OnUpdateWorkflowDefinition?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateWorkflowDefinition(Exception exception)
        {
            OnErrorUpdateWorkflowDefinition?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WorkflowDefinitionsApi : IWorkflowDefinitionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WorkflowDefinitionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WorkflowDefinitionsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowDefinitionsApi(ILogger<WorkflowDefinitionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WorkflowDefinitionsApiEvents workflowDefinitionsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WorkflowDefinitionsApi>();
            HttpClient = httpClient;
            Events = workflowDefinitionsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateWorkflowDefinition(CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createWorkflowDefinitionRequest"></param>
        /// <returns></returns>
        private void ValidateCreateWorkflowDefinition(CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest)
        {
            if (createWorkflowDefinitionRequest == null)
                throw new ArgumentNullException(nameof(createWorkflowDefinitionRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createWorkflowDefinitionRequest"></param>
        private void AfterCreateWorkflowDefinitionDefaultImplementation(ICreateWorkflowDefinitionApiResponse apiResponseLocalVar, CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateWorkflowDefinition(ref suppressDefaultLog, apiResponseLocalVar, createWorkflowDefinitionRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createWorkflowDefinitionRequest"></param>
        partial void AfterCreateWorkflowDefinition(ref bool suppressDefaultLog, ICreateWorkflowDefinitionApiResponse apiResponseLocalVar, CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createWorkflowDefinitionRequest"></param>
        private void OnErrorCreateWorkflowDefinitionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateWorkflowDefinition(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createWorkflowDefinitionRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createWorkflowDefinitionRequest"></param>
        partial void OnErrorCreateWorkflowDefinition(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest);

        /// <summary>
        /// Create a new workflow definition Creates a new workflow definition (template). Requires a name, version, and a list of steps.
        /// </summary>
        /// <param name="createWorkflowDefinitionRequest">Workflow definition object to be created</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWorkflowDefinitionApiResponse"/>&gt;</returns>
        public async Task<ICreateWorkflowDefinitionApiResponse?> CreateWorkflowDefinitionOrDefaultAsync(CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateWorkflowDefinitionAsync(createWorkflowDefinitionRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new workflow definition Creates a new workflow definition (template). Requires a name, version, and a list of steps.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkflowDefinitionRequest">Workflow definition object to be created</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWorkflowDefinitionApiResponse"/>&gt;</returns>
        public async Task<ICreateWorkflowDefinitionApiResponse> CreateWorkflowDefinitionAsync(CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateWorkflowDefinition(createWorkflowDefinitionRequest);

                FormatCreateWorkflowDefinition(createWorkflowDefinitionRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/workflows/definitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/workflows/definitions");

                    httpRequestMessageLocalVar.Content = (createWorkflowDefinitionRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createWorkflowDefinitionRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateWorkflowDefinitionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateWorkflowDefinitionApiResponse>();

                        CreateWorkflowDefinitionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/workflows/definitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateWorkflowDefinitionDefaultImplementation(apiResponseLocalVar, createWorkflowDefinitionRequest);

                        Events.ExecuteOnCreateWorkflowDefinition(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateWorkflowDefinitionDefaultImplementation(e, "/workflows/definitions", uriBuilderLocalVar.Path, createWorkflowDefinitionRequest);
                Events.ExecuteOnErrorCreateWorkflowDefinition(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateWorkflowDefinitionApiResponse"/>
        /// </summary>
        public partial class CreateWorkflowDefinitionApiResponse : BlueIQ.Sdk.Client.Client.ApiResponse, ICreateWorkflowDefinitionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateWorkflowDefinitionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateWorkflowDefinitionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateWorkflowDefinitionApiResponse(ILogger<CreateWorkflowDefinitionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.WorkflowDefinition? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.WorkflowDefinition>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.WorkflowDefinition? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteWorkflowDefinition(ref Guid definitionId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="definitionId"></param>
        private void AfterDeleteWorkflowDefinitionDefaultImplementation(IDeleteWorkflowDefinitionApiResponse apiResponseLocalVar, Guid definitionId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteWorkflowDefinition(ref suppressDefaultLog, apiResponseLocalVar, definitionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="definitionId"></param>
        partial void AfterDeleteWorkflowDefinition(ref bool suppressDefaultLog, IDeleteWorkflowDefinitionApiResponse apiResponseLocalVar, Guid definitionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="definitionId"></param>
        private void OnErrorDeleteWorkflowDefinitionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid definitionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteWorkflowDefinition(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, definitionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="definitionId"></param>
        partial void OnErrorDeleteWorkflowDefinition(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid definitionId);

        /// <summary>
        /// Delete a workflow definition by ID Deletes a specific workflow definition by its unique ID. This may affect the ability to start new workflow instances from this definition.
        /// </summary>
        /// <param name="definitionId">ID of the workflow definition to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWorkflowDefinitionApiResponse"/>&gt;</returns>
        public async Task<IDeleteWorkflowDefinitionApiResponse?> DeleteWorkflowDefinitionOrDefaultAsync(Guid definitionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteWorkflowDefinitionAsync(definitionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a workflow definition by ID Deletes a specific workflow definition by its unique ID. This may affect the ability to start new workflow instances from this definition.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">ID of the workflow definition to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteWorkflowDefinitionApiResponse"/>&gt;</returns>
        public async Task<IDeleteWorkflowDefinitionApiResponse> DeleteWorkflowDefinitionAsync(Guid definitionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteWorkflowDefinition(ref definitionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/workflows/definitions/{definitionId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/workflows/definitions/{definitionId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdefinitionId%7D", Uri.EscapeDataString(definitionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteWorkflowDefinitionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteWorkflowDefinitionApiResponse>();

                        DeleteWorkflowDefinitionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/workflows/definitions/{definitionId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteWorkflowDefinitionDefaultImplementation(apiResponseLocalVar, definitionId);

                        Events.ExecuteOnDeleteWorkflowDefinition(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteWorkflowDefinitionDefaultImplementation(e, "/workflows/definitions/{definitionId}", uriBuilderLocalVar.Path, definitionId);
                Events.ExecuteOnErrorDeleteWorkflowDefinition(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteWorkflowDefinitionApiResponse"/>
        /// </summary>
        public partial class DeleteWorkflowDefinitionApiResponse : BlueIQ.Sdk.Client.Client.ApiResponse, IDeleteWorkflowDefinitionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteWorkflowDefinitionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteWorkflowDefinitionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteWorkflowDefinitionApiResponse(ILogger<DeleteWorkflowDefinitionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetWorkflowDefinitionById(ref Guid definitionId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="definitionId"></param>
        private void AfterGetWorkflowDefinitionByIdDefaultImplementation(IGetWorkflowDefinitionByIdApiResponse apiResponseLocalVar, Guid definitionId)
        {
            bool suppressDefaultLog = false;
            AfterGetWorkflowDefinitionById(ref suppressDefaultLog, apiResponseLocalVar, definitionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="definitionId"></param>
        partial void AfterGetWorkflowDefinitionById(ref bool suppressDefaultLog, IGetWorkflowDefinitionByIdApiResponse apiResponseLocalVar, Guid definitionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="definitionId"></param>
        private void OnErrorGetWorkflowDefinitionByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid definitionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetWorkflowDefinitionById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, definitionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="definitionId"></param>
        partial void OnErrorGetWorkflowDefinitionById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid definitionId);

        /// <summary>
        /// Get a workflow definition by ID Retrieves the details of a specific workflow definition by its unique ID.
        /// </summary>
        /// <param name="definitionId">ID of the workflow definition to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkflowDefinitionByIdApiResponse"/>&gt;</returns>
        public async Task<IGetWorkflowDefinitionByIdApiResponse?> GetWorkflowDefinitionByIdOrDefaultAsync(Guid definitionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWorkflowDefinitionByIdAsync(definitionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a workflow definition by ID Retrieves the details of a specific workflow definition by its unique ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">ID of the workflow definition to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWorkflowDefinitionByIdApiResponse"/>&gt;</returns>
        public async Task<IGetWorkflowDefinitionByIdApiResponse> GetWorkflowDefinitionByIdAsync(Guid definitionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetWorkflowDefinitionById(ref definitionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/workflows/definitions/{definitionId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/workflows/definitions/{definitionId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdefinitionId%7D", Uri.EscapeDataString(definitionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWorkflowDefinitionByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWorkflowDefinitionByIdApiResponse>();

                        GetWorkflowDefinitionByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/workflows/definitions/{definitionId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWorkflowDefinitionByIdDefaultImplementation(apiResponseLocalVar, definitionId);

                        Events.ExecuteOnGetWorkflowDefinitionById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWorkflowDefinitionByIdDefaultImplementation(e, "/workflows/definitions/{definitionId}", uriBuilderLocalVar.Path, definitionId);
                Events.ExecuteOnErrorGetWorkflowDefinitionById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWorkflowDefinitionByIdApiResponse"/>
        /// </summary>
        public partial class GetWorkflowDefinitionByIdApiResponse : BlueIQ.Sdk.Client.Client.ApiResponse, IGetWorkflowDefinitionByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWorkflowDefinitionByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWorkflowDefinitionByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWorkflowDefinitionByIdApiResponse(ILogger<GetWorkflowDefinitionByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.WorkflowDefinition? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.WorkflowDefinition>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.WorkflowDefinition? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListWorkflowDefinitions(ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterListWorkflowDefinitionsDefaultImplementation(IListWorkflowDefinitionsApiResponse apiResponseLocalVar, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListWorkflowDefinitions(ref suppressDefaultLog, apiResponseLocalVar, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterListWorkflowDefinitions(ref bool suppressDefaultLog, IListWorkflowDefinitionsApiResponse apiResponseLocalVar, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListWorkflowDefinitionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListWorkflowDefinitions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListWorkflowDefinitions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// List all workflow definitions Retrieves a paginated list of all available workflow definitions (templates). Supports query parameters for pagination.
        /// </summary>
        /// <param name="page">Page number for pagination (optional, default to 1)</param>
        /// <param name="pageSize">Number of workflow definitions per page (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWorkflowDefinitionsApiResponse"/>&gt;</returns>
        public async Task<IListWorkflowDefinitionsApiResponse?> ListWorkflowDefinitionsOrDefaultAsync(Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListWorkflowDefinitionsAsync(page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all workflow definitions Retrieves a paginated list of all available workflow definitions (templates). Supports query parameters for pagination.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination (optional, default to 1)</param>
        /// <param name="pageSize">Number of workflow definitions per page (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListWorkflowDefinitionsApiResponse"/>&gt;</returns>
        public async Task<IListWorkflowDefinitionsApiResponse> ListWorkflowDefinitionsAsync(Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatListWorkflowDefinitions(ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/workflows/definitions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/workflows/definitions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListWorkflowDefinitionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListWorkflowDefinitionsApiResponse>();

                        ListWorkflowDefinitionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/workflows/definitions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListWorkflowDefinitionsDefaultImplementation(apiResponseLocalVar, page, pageSize);

                        Events.ExecuteOnListWorkflowDefinitions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListWorkflowDefinitionsDefaultImplementation(e, "/workflows/definitions", uriBuilderLocalVar.Path, page, pageSize);
                Events.ExecuteOnErrorListWorkflowDefinitions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListWorkflowDefinitionsApiResponse"/>
        /// </summary>
        public partial class ListWorkflowDefinitionsApiResponse : BlueIQ.Sdk.Client.Client.ApiResponse, IListWorkflowDefinitionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListWorkflowDefinitionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListWorkflowDefinitionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListWorkflowDefinitionsApiResponse(ILogger<ListWorkflowDefinitionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.WorkflowDefinitionListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.WorkflowDefinitionListResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.WorkflowDefinitionListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateWorkflowDefinition(ref Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateWorkflowDefinitionRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateWorkflowDefinition(UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest)
        {
            if (updateWorkflowDefinitionRequest == null)
                throw new ArgumentNullException(nameof(updateWorkflowDefinitionRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="definitionId"></param>
        /// <param name="updateWorkflowDefinitionRequest"></param>
        private void AfterUpdateWorkflowDefinitionDefaultImplementation(IUpdateWorkflowDefinitionApiResponse apiResponseLocalVar, Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateWorkflowDefinition(ref suppressDefaultLog, apiResponseLocalVar, definitionId, updateWorkflowDefinitionRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="definitionId"></param>
        /// <param name="updateWorkflowDefinitionRequest"></param>
        partial void AfterUpdateWorkflowDefinition(ref bool suppressDefaultLog, IUpdateWorkflowDefinitionApiResponse apiResponseLocalVar, Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="definitionId"></param>
        /// <param name="updateWorkflowDefinitionRequest"></param>
        private void OnErrorUpdateWorkflowDefinitionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateWorkflowDefinition(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, definitionId, updateWorkflowDefinitionRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="definitionId"></param>
        /// <param name="updateWorkflowDefinitionRequest"></param>
        partial void OnErrorUpdateWorkflowDefinition(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest);

        /// <summary>
        /// Update an existing workflow definition Updates an existing workflow definition. Allows modification of name, version, description, steps, and active status.
        /// </summary>
        /// <param name="definitionId">ID of the workflow definition to update</param>
        /// <param name="updateWorkflowDefinitionRequest">Workflow definition object to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWorkflowDefinitionApiResponse"/>&gt;</returns>
        public async Task<IUpdateWorkflowDefinitionApiResponse?> UpdateWorkflowDefinitionOrDefaultAsync(Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateWorkflowDefinitionAsync(definitionId, updateWorkflowDefinitionRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an existing workflow definition Updates an existing workflow definition. Allows modification of name, version, description, steps, and active status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">ID of the workflow definition to update</param>
        /// <param name="updateWorkflowDefinitionRequest">Workflow definition object to be updated</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateWorkflowDefinitionApiResponse"/>&gt;</returns>
        public async Task<IUpdateWorkflowDefinitionApiResponse> UpdateWorkflowDefinitionAsync(Guid definitionId, UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateWorkflowDefinition(updateWorkflowDefinitionRequest);

                FormatUpdateWorkflowDefinition(ref definitionId, updateWorkflowDefinitionRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/workflows/definitions/{definitionId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/workflows/definitions/{definitionId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdefinitionId%7D", Uri.EscapeDataString(definitionId.ToString()));

                    httpRequestMessageLocalVar.Content = (updateWorkflowDefinitionRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateWorkflowDefinitionRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateWorkflowDefinitionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateWorkflowDefinitionApiResponse>();

                        UpdateWorkflowDefinitionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/workflows/definitions/{definitionId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateWorkflowDefinitionDefaultImplementation(apiResponseLocalVar, definitionId, updateWorkflowDefinitionRequest);

                        Events.ExecuteOnUpdateWorkflowDefinition(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateWorkflowDefinitionDefaultImplementation(e, "/workflows/definitions/{definitionId}", uriBuilderLocalVar.Path, definitionId, updateWorkflowDefinitionRequest);
                Events.ExecuteOnErrorUpdateWorkflowDefinition(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateWorkflowDefinitionApiResponse"/>
        /// </summary>
        public partial class UpdateWorkflowDefinitionApiResponse : BlueIQ.Sdk.Client.Client.ApiResponse, IUpdateWorkflowDefinitionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateWorkflowDefinitionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateWorkflowDefinitionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateWorkflowDefinitionApiResponse(ILogger<UpdateWorkflowDefinitionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.WorkflowDefinition? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.WorkflowDefinition>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.WorkflowDefinition? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public BlueIQ.Sdk.Client.Model.ErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<BlueIQ.Sdk.Client.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out BlueIQ.Sdk.Client.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
