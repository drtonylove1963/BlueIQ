/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using BlueIQ.Sdk.Client.Api;
using BlueIQ.Sdk.Client.Model;

namespace BlueIQ.Sdk.Client.Client
{
    /// <summary>
    /// Provides hosting configuration for BlueIQ.Sdk.Client
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new CreateRoleRequestJsonConverter());
            _jsonOptions.Converters.Add(new CreateUserRequestJsonConverter());
            _jsonOptions.Converters.Add(new CreateWorkflowDefinitionRequestJsonConverter());
            _jsonOptions.Converters.Add(new ErrorResponseJsonConverter());
            _jsonOptions.Converters.Add(new LoginSuccessResponseJsonConverter());
            _jsonOptions.Converters.Add(new PaginationJsonConverter());
            _jsonOptions.Converters.Add(new RefreshTokenRequestJsonConverter());
            _jsonOptions.Converters.Add(new RoleJsonConverter());
            _jsonOptions.Converters.Add(new RoleListResponseJsonConverter());
            _jsonOptions.Converters.Add(new StartWorkflowInstanceRequestJsonConverter());
            _jsonOptions.Converters.Add(new UpdateRoleRequestJsonConverter());
            _jsonOptions.Converters.Add(new UpdateUserRequestJsonConverter());
            _jsonOptions.Converters.Add(new UpdateWorkflowDefinitionRequestJsonConverter());
            _jsonOptions.Converters.Add(new UserJsonConverter());
            _jsonOptions.Converters.Add(new UserListResponseJsonConverter());
            _jsonOptions.Converters.Add(new UserLoginRequestJsonConverter());
            _jsonOptions.Converters.Add(new WorkflowDefinitionJsonConverter());
            _jsonOptions.Converters.Add(new WorkflowDefinitionListResponseJsonConverter());
            _jsonOptions.Converters.Add(new WorkflowDefinitionStepJsonConverter());
            _jsonOptions.Converters.Add(new WorkflowInstanceJsonConverter());
            _jsonOptions.Converters.Add(new WorkflowInstanceListResponseJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AuthenticationApiEvents>();
            _services.AddTransient<IAuthenticationApi, AuthenticationApi>();
            _services.AddSingleton<RoleManagementApiEvents>();
            _services.AddTransient<IRoleManagementApi, RoleManagementApi>();
            _services.AddSingleton<UserManagementApiEvents>();
            _services.AddTransient<IUserManagementApi, UserManagementApi>();
            _services.AddSingleton<WorkflowDefinitionsApiEvents>();
            _services.AddTransient<IWorkflowDefinitionsApi, WorkflowDefinitionsApi>();
            _services.AddSingleton<WorkflowInstancesApiEvents>();
            _services.AddTransient<IWorkflowInstancesApi, WorkflowInstancesApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IAuthenticationApi, AuthenticationApi>(client));
            builders.Add(_services.AddHttpClient<IRoleManagementApi, RoleManagementApi>(client));
            builders.Add(_services.AddHttpClient<IUserManagementApi, UserManagementApi>(client));
            builders.Add(_services.AddHttpClient<IWorkflowDefinitionsApi, WorkflowDefinitionsApi>(client));
            builders.Add(_services.AddHttpClient<IWorkflowInstancesApi, WorkflowInstancesApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
