/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using BlueIQ.Sdk.Client.Client;
using BlueIQ.Sdk.Client.Api;
using BlueIQ.Sdk.Client.Extensions;
using Xunit;

namespace BlueIQ.Sdk.Client.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var authenticationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAuthenticationApi>();
            Assert.True(authenticationApi.HttpClient.BaseAddress != null);

            var roleManagementApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRoleManagementApi>();
            Assert.True(roleManagementApi.HttpClient.BaseAddress != null);

            var userManagementApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserManagementApi>();
            Assert.True(userManagementApi.HttpClient.BaseAddress != null);

            var workflowDefinitionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWorkflowDefinitionsApi>();
            Assert.True(workflowDefinitionsApi.HttpClient.BaseAddress != null);

            var workflowInstancesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWorkflowInstancesApi>();
            Assert.True(workflowInstancesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var authenticationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAuthenticationApi>();
            Assert.True(authenticationApi.HttpClient.BaseAddress != null);

            var roleManagementApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRoleManagementApi>();
            Assert.True(roleManagementApi.HttpClient.BaseAddress != null);

            var userManagementApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserManagementApi>();
            Assert.True(userManagementApi.HttpClient.BaseAddress != null);

            var workflowDefinitionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWorkflowDefinitionsApi>();
            Assert.True(workflowDefinitionsApi.HttpClient.BaseAddress != null);

            var workflowInstancesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWorkflowInstancesApi>();
            Assert.True(workflowInstancesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var authenticationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAuthenticationApi>();
            Assert.True(authenticationApi.HttpClient.BaseAddress != null);
            
            var roleManagementApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRoleManagementApi>();
            Assert.True(roleManagementApi.HttpClient.BaseAddress != null);
            
            var userManagementApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserManagementApi>();
            Assert.True(userManagementApi.HttpClient.BaseAddress != null);
            
            var workflowDefinitionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWorkflowDefinitionsApi>();
            Assert.True(workflowDefinitionsApi.HttpClient.BaseAddress != null);
            
            var workflowInstancesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWorkflowInstancesApi>();
            Assert.True(workflowInstancesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var authenticationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAuthenticationApi>();
            Assert.True(authenticationApi.HttpClient.BaseAddress != null);

            var roleManagementApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRoleManagementApi>();
            Assert.True(roleManagementApi.HttpClient.BaseAddress != null);

            var userManagementApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserManagementApi>();
            Assert.True(userManagementApi.HttpClient.BaseAddress != null);

            var workflowDefinitionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWorkflowDefinitionsApi>();
            Assert.True(workflowDefinitionsApi.HttpClient.BaseAddress != null);

            var workflowInstancesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWorkflowInstancesApi>();
            Assert.True(workflowInstancesApi.HttpClient.BaseAddress != null);
        }
    }
}
