/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using BlueIQ.Sdk.Client.Api;
using BlueIQ.Sdk.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace BlueIQ.Sdk.Client.Test.Api
{
    /// <summary>
    ///  Class for testing RoleManagementApi
    /// </summary>
    public sealed class RoleManagementApiTests : ApiTestsBase
    {
        private readonly IRoleManagementApi _instance;

        public RoleManagementApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IRoleManagementApi>();
        }

        /// <summary>
        /// Test CreateRole
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateRoleAsyncTest()
        {
            CreateRoleRequest createRoleRequest = default!;
            var response = await _instance.CreateRoleAsync(createRoleRequest);
            var model = response.Created();
            Assert.IsType<Role>(model);
        }

        /// <summary>
        /// Test DeleteRole
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteRoleAsyncTest()
        {
            Guid roleId = default!;
            await _instance.DeleteRoleAsync(roleId);
        }

        /// <summary>
        /// Test GetRoleById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRoleByIdAsyncTest()
        {
            Guid roleId = default!;
            var response = await _instance.GetRoleByIdAsync(roleId);
            var model = response.Ok();
            Assert.IsType<Role>(model);
        }

        /// <summary>
        /// Test ListRoles
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListRolesAsyncTest()
        {
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListRolesAsync(page, pageSize);
            var model = response.Ok();
            Assert.IsType<RoleListResponse>(model);
        }

        /// <summary>
        /// Test UpdateRole
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateRoleAsyncTest()
        {
            Guid roleId = default!;
            UpdateRoleRequest updateRoleRequest = default!;
            var response = await _instance.UpdateRoleAsync(roleId, updateRoleRequest);
            var model = response.Ok();
            Assert.IsType<Role>(model);
        }
    }
}
