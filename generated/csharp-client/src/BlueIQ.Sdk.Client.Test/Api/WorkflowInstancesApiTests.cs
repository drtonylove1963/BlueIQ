/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using BlueIQ.Sdk.Client.Api;
using BlueIQ.Sdk.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace BlueIQ.Sdk.Client.Test.Api
{
    /// <summary>
    ///  Class for testing WorkflowInstancesApi
    /// </summary>
    public sealed class WorkflowInstancesApiTests : ApiTestsBase
    {
        private readonly IWorkflowInstancesApi _instance;

        public WorkflowInstancesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IWorkflowInstancesApi>();
        }

        /// <summary>
        /// Test CancelWorkflowInstance
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CancelWorkflowInstanceAsyncTest()
        {
            Guid instanceId = default!;
            await _instance.CancelWorkflowInstanceAsync(instanceId);
        }

        /// <summary>
        /// Test GetWorkflowInstanceById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWorkflowInstanceByIdAsyncTest()
        {
            Guid instanceId = default!;
            var response = await _instance.GetWorkflowInstanceByIdAsync(instanceId);
            var model = response.Ok();
            Assert.IsType<WorkflowInstance>(model);
        }

        /// <summary>
        /// Test ListWorkflowInstances
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListWorkflowInstancesAsyncTest()
        {
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListWorkflowInstancesAsync(page, pageSize);
            var model = response.Ok();
            Assert.IsType<WorkflowInstanceListResponse>(model);
        }

        /// <summary>
        /// Test ResumeWorkflowInstance
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ResumeWorkflowInstanceAsyncTest()
        {
            Guid instanceId = default!;
            await _instance.ResumeWorkflowInstanceAsync(instanceId);
        }

        /// <summary>
        /// Test RetryWorkflowInstance
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RetryWorkflowInstanceAsyncTest()
        {
            Guid instanceId = default!;
            await _instance.RetryWorkflowInstanceAsync(instanceId);
        }

        /// <summary>
        /// Test StartWorkflowInstance
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task StartWorkflowInstanceAsyncTest()
        {
            StartWorkflowInstanceRequest startWorkflowInstanceRequest = default!;
            var response = await _instance.StartWorkflowInstanceAsync(startWorkflowInstanceRequest);
            var model = response.Created();
            Assert.IsType<WorkflowInstance>(model);
        }

        /// <summary>
        /// Test SuspendWorkflowInstance
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SuspendWorkflowInstanceAsyncTest()
        {
            Guid instanceId = default!;
            await _instance.SuspendWorkflowInstanceAsync(instanceId);
        }
    }
}
