/*
 * BlueIQ API Gateway
 *
 * This document describes the API for the BlueIQ API Gateway. It serves as the single entry point for all client interactions with the BlueIQ microservices. This specification is designed to be a reference for consumers and a template for similar gateway patterns. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using BlueIQ.Sdk.Client.Api;
using BlueIQ.Sdk.Client.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace BlueIQ.Sdk.Client.Test.Api
{
    /// <summary>
    ///  Class for testing WorkflowDefinitionsApi
    /// </summary>
    public sealed class WorkflowDefinitionsApiTests : ApiTestsBase
    {
        private readonly IWorkflowDefinitionsApi _instance;

        public WorkflowDefinitionsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IWorkflowDefinitionsApi>();
        }

        /// <summary>
        /// Test CreateWorkflowDefinition
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateWorkflowDefinitionAsyncTest()
        {
            CreateWorkflowDefinitionRequest createWorkflowDefinitionRequest = default!;
            var response = await _instance.CreateWorkflowDefinitionAsync(createWorkflowDefinitionRequest);
            var model = response.Created();
            Assert.IsType<WorkflowDefinition>(model);
        }

        /// <summary>
        /// Test DeleteWorkflowDefinition
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteWorkflowDefinitionAsyncTest()
        {
            Guid definitionId = default!;
            await _instance.DeleteWorkflowDefinitionAsync(definitionId);
        }

        /// <summary>
        /// Test GetWorkflowDefinitionById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetWorkflowDefinitionByIdAsyncTest()
        {
            Guid definitionId = default!;
            var response = await _instance.GetWorkflowDefinitionByIdAsync(definitionId);
            var model = response.Ok();
            Assert.IsType<WorkflowDefinition>(model);
        }

        /// <summary>
        /// Test ListWorkflowDefinitions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListWorkflowDefinitionsAsyncTest()
        {
            Client.Option<int> page = default!;
            Client.Option<int> pageSize = default!;
            var response = await _instance.ListWorkflowDefinitionsAsync(page, pageSize);
            var model = response.Ok();
            Assert.IsType<WorkflowDefinitionListResponse>(model);
        }

        /// <summary>
        /// Test UpdateWorkflowDefinition
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateWorkflowDefinitionAsyncTest()
        {
            Guid definitionId = default!;
            UpdateWorkflowDefinitionRequest updateWorkflowDefinitionRequest = default!;
            var response = await _instance.UpdateWorkflowDefinitionAsync(definitionId, updateWorkflowDefinitionRequest);
            var model = response.Ok();
            Assert.IsType<WorkflowDefinition>(model);
        }
    }
}
