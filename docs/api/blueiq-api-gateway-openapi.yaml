openapi: 3.0.3
info:
  title: BlueIQ API Gateway
  version: 1.0.0
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  description: |
    This document describes the API for the BlueIQ API Gateway.
    It serves as the single entry point for all client interactions with the BlueIQ microservices.
    This specification is designed to be a reference for consumers and a template for similar gateway patterns.
servers:
  - url: http://localhost:5000/api/v1
    description: Local development server
  - url: https://dev.blueiq.example.com/api/v1
    description: Development environment
  - url: https://staging.blueiq.example.com/api/v1
    description: Staging environment
  - url: https://blueiq.example.com/api/v1
    description: Production environment

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: Operations related to user authentication and session management.
  - name: User Management
    description: Operations related to managing user accounts.
  - name: Role Management
    description: Operations related to managing user roles and permissions.
  - name: Workflow Definitions
    description: Operations related to managing workflow blueprints/templates.
  - name: Workflow Instances
    description: Operations related to managing running or completed instances of workflows.

paths:
  /workflows/instances/{instanceId}/cancel:
    post:
      tags:
        - Workflow Instances
      summary: Cancel Workflow Instance
      operationId: cancelWorkflowInstance
      description: Cancels a currently running workflow instance. The instance must be in a cancellable state.
      security:
        - BearerAuth: []
      parameters:
        - name: instanceId
          in: path
          required: true
          description: ID of the workflow instance to cancel.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Workflow instance cancelled successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/instances/{instanceId}/suspend:
    post:
      tags:
        - Workflow Instances
      summary: Suspend Workflow Instance
      operationId: suspendWorkflowInstance
      description: Suspends a currently running workflow instance. A suspended instance can be resumed later.
      security:
        - BearerAuth: []
      parameters:
        - name: instanceId
          in: path
          required: true
          description: ID of the workflow instance to suspend.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Workflow instance suspended successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/instances/{instanceId}/resume:
    post:
      tags:
        - Workflow Instances
      summary: Resume Workflow Instance
      operationId: resumeWorkflowInstance
      description: Resumes a previously suspended workflow instance.
      security:
        - BearerAuth: []
      parameters:
        - name: instanceId
          in: path
          required: true
          description: ID of the workflow instance to resume.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Workflow instance resumed successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/instances/{instanceId}/retry:
    post:
      tags:
        - Workflow Instances
      summary: Retry Workflow Instance
      operationId: retryWorkflowInstance
      description: Retries a workflow instance that is in a failed or pending_retry state, typically from its last failed step.
      security:
        - BearerAuth: []
      parameters:
        - name: instanceId
          in: path
          required: true
          description: ID of the workflow instance to retry.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Workflow instance retry initiated successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      operationId: loginUser
      description: Authenticates a user with their credentials and returns JWT access and refresh tokens.
      # No global security for login, it's public
      security: [] 
      requestBody:
        description: User credentials for login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Login successful, returns access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '400':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh an access token
      operationId: refreshToken
      description: Obtains a new JWT access token using a valid refresh token.
      # No global security for refresh, it's public
      security: [] 
      requestBody:
        description: Refresh token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out a user
      operationId: logoutUser
      description: Invalidates the user's current session. The specifics of invalidation (e.g., token blocklisting) depend on server implementation.
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - User Management
      summary: List all users
      operationId: listUsers
      description: Retrieves a paginated list of all user accounts. Supports query parameters for pagination.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - User Management
      summary: Create a new user
      operationId: createUser
      description: Creates a new user account. Requires username, email, and password. Optional fields include first name, last name, and role assignments.
      security:
        - BearerAuth: []
      requestBody:
        description: User object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}:
    get:
      tags:
        - User Management
      summary: Get a user by ID
      operationId: getUserById
      description: Retrieves the details of a specific user account by their unique ID.
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - User Management
      summary: Update an existing user
      operationId: updateUser
      description: Updates an existing user's account details. Allows modification of email, names, active status, and role assignments.
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        description: User object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - User Management
      summary: Delete a user by ID
      operationId: deleteUser
      description: Deletes a specific user account by their unique ID. This operation is typically irreversible.
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles:
    get:
      tags:
        - Role Management
      summary: List all roles
      operationId: listRoles
      description: Retrieves a paginated list of all user roles. Supports query parameters for pagination.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of roles per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Role Management
      summary: Create a new role
      operationId: createRole
      description: Creates a new user role. Requires a role name. Optional fields include description and a list of permissions.
      security:
        - BearerAuth: []
      requestBody:
        description: Role object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          description: Role already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/{roleId}:
    get:
      tags:
        - Role Management
      summary: Get a role by ID
      operationId: getRoleById
      description: Retrieves the details of a specific user role by its unique ID.
      security:
        - BearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          description: ID of the role to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Role Management
      summary: Update an existing role
      operationId: updateRole
      description: Updates an existing user role. Allows modification of name, description, and permissions.
      security:
        - BearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          description: ID of the role to update
          schema:
            type: string
            format: uuid
      requestBody:
        description: Role object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Role Management
      summary: Delete a role by ID
      operationId: deleteRole
      description: Deletes a specific user role by its unique ID. This operation may affect users assigned to this role.
      security:
        - BearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          description: ID of the role to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Role deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/definitions:
    get:
      tags:
        - Workflow Definitions
      summary: List all workflow definitions
      operationId: listWorkflowDefinitions
      description: Retrieves a paginated list of all available workflow definitions (templates). Supports query parameters for pagination.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of workflow definitions per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A list of workflow definitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinitionListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Workflow Definitions
      summary: Create a new workflow definition
      operationId: createWorkflowDefinition
      description: Creates a new workflow definition (template). Requires a name, version, and a list of steps.
      security:
        - BearerAuth: []
      requestBody:
        description: Workflow definition object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowDefinitionRequest'
      responses:
        '201':
          description: Workflow definition created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          description: Workflow definition already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/definitions/{definitionId}:
    get:
      tags:
        - Workflow Definitions
      summary: Get a workflow definition by ID
      operationId: getWorkflowDefinitionById
      description: Retrieves the details of a specific workflow definition by its unique ID.
      security:
        - BearerAuth: []
      parameters:
        - name: definitionId
          in: path
          required: true
          description: ID of the workflow definition to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Workflow Definitions
      summary: Update an existing workflow definition
      operationId: updateWorkflowDefinition
      description: Updates an existing workflow definition. Allows modification of name, version, description, steps, and active status.
      security:
        - BearerAuth: []
      parameters:
        - name: definitionId
          in: path
          required: true
          description: ID of the workflow definition to update
          schema:
            type: string
            format: uuid
      requestBody:
        description: Workflow definition object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowDefinitionRequest'
      responses:
        '200':
          description: Workflow definition updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Workflow Definitions
      summary: Delete a workflow definition by ID
      operationId: deleteWorkflowDefinition
      description: Deletes a specific workflow definition by its unique ID. This may affect the ability to start new workflow instances from this definition.
      security:
        - BearerAuth: []
      parameters:
        - name: definitionId
          in: path
          required: true
          description: ID of the workflow definition to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Workflow definition deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/instances:
    get:
      tags:
        - Workflow Instances
      summary: List all workflow instances
      operationId: listWorkflowInstances
      description: Retrieves a paginated list of all workflow instances, regardless of their status. Supports query parameters for pagination.
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of workflow instances per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A list of workflow instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInstanceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Workflow Instances
      summary: Start a new workflow instance
      operationId: startWorkflowInstance
      description: Starts a new instance of a specified workflow definition. Requires the workflow definition ID and can accept initial variables.
      security:
        - BearerAuth: []
      requestBody:
        description: Parameters to start a workflow instance
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartWorkflowInstanceRequest'
      responses:
        '201':
          description: Workflow instance started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInstance'
        '400':
          description: Invalid input or definition not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Workflow definition not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/instances/{instanceId}:
    get:
      tags:
        - Workflow Instances
      summary: Get a workflow instance by ID
      operationId: getWorkflowInstanceById
      description: Retrieves the details and current state of a specific workflow instance by its unique ID.
      security:
        - BearerAuth: []
      parameters:
        - name: instanceId
          in: path
          required: true
          description: ID of the workflow instance to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInstance'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid input provided.
        details:
          type: string
          nullable: true
          example: The 'username' field is required.

    UserLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: adminuser
          description: The user's username.
        password:
          type: string
          example: 'P@$$wOrd123!'
          description: The user's password.

    LoginSuccessResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          description: JWT access token.
        refreshToken:
          type: string
          example: def50200f07711e9b210d663bd873d93
          description: Token used to refresh the access token.
        expiresIn:
          type: integer
          example: 3600
          description: Access token validity period in seconds.

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: def50200f07711e9b210d663bd873d93
          description: The refresh token.

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          readOnly: true
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        firstName:
          type: string
          example: John
          nullable: true
        lastName:
          type: string
          example: Doe
          nullable: true
        isActive:
          type: boolean
          example: true
          default: true
        roleIds:
          type: array
          items:
            type: string
            format: uuid
          example: ["f47ac10b-58cc-4372-a567-0e02b2c3d479"]
          description: List of role IDs assigned to the user.
        createdAt:
          type: string
          format: date-time
          example: '2023-01-15T10:30:00Z'
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-16T12:45:00Z'
          readOnly: true

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        currentPage:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: newuser
        email:
          type: string
          format: email
          example: newuser@example.com
        password:
          type: string
          format: password
          example: 'Str0ngP@sswOrd!'
          minLength: 8
        firstName:
          type: string
          example: New
          nullable: true
        lastName:
          type: string
          example: User
          nullable: true
        roleIds:
          type: array
          items:
            type: string
            format: uuid
          example: ["f47ac10b-58cc-4372-a567-0e02b2c3d479"]
          description: List of role IDs to assign to the new user.

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: updateduser@example.com
        firstName:
          type: string
          example: Updated
          nullable: true
        lastName:
          type: string
          example: Userley
          nullable: true
        isActive:
          type: boolean
          example: false
        roleIds:
          type: array
          items:
            type: string
            format: uuid
          example: ["a1b2c3d4-e5f6-7890-1234-567890abcdef"]
          description: List of role IDs to assign to the user. This will replace existing roles.

    Role:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          readOnly: true
        name:
          type: string
          example: Administrator
          description: The name of the role.
        description:
          type: string
          example: Has full system access.
          nullable: true
          description: A description of the role.
        permissions:
          type: array
          items:
            type: string
          example: ["users:create", "users:read", "users:update", "users:delete"]
          description: List of permissions associated with the role.
        createdAt:
          type: string
          format: date-time
          example: '2023-01-10T09:00:00Z'
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-10T09:00:00Z'
          readOnly: true

    RoleListResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        pagination:
          $ref: '#/components/schemas/Pagination'

    CreateRoleRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Editor
        description:
          type: string
          example: Can edit content.
          nullable: true
        permissions:
          type: array
          items:
            type: string
          example: ["content:edit", "content:publish"]
          description: List of permissions for the new role.

    UpdateRoleRequest:
      type: object
      properties:
        name:
          type: string
          example: Senior Editor
        description:
          type: string
          example: Can edit and approve content.
          nullable: true
        permissions:
          type: array
          items:
            type: string
          example: ["content:edit", "content:publish", "content:approve"]
          description: List of permissions for the role. This will replace existing permissions.

    WorkflowDefinitionStep:
      type: object
      required:
        - name
        - type
      properties:
        id:
          type: string
          format: uuid
          example: c1b2a3d4-e5f6-7890-1234-567890abcdef
          description: Unique identifier for the step within the definition.
        name:
          type: string
          example: ApprovalStep
          description: Human-readable name for the step.
        type:
          type: string
          example: manual_approval
          description: Type of the step (e.g., 'manual_approval', 'automated_task', 'notification').
        config:
          type: object
          additionalProperties: true
          example:
            assignee_group: "editors"
            notification_template: "approval_request_email"
          description: Step-specific configuration parameters.
        nextSteps:
          type: array
          items:
            type: string # UUID of the next step ID
            format: uuid
          example:
            - a1b2c3d4-e5f6-7890-1234-567890abcdef
            - 123e4567-e89b-12d3-a456-426614174000
          description: List of IDs of the next possible steps in the workflow.
        isInitialStep:
          type: boolean
          default: false
          description: Indicates if this is the starting step of the workflow.

    WorkflowDefinition:
      type: object
      required:
        - name
        - version
        - steps
      properties:
        id:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
          readOnly: true
        name:
          type: string
          example: DocumentApprovalProcess
          description: Human-readable name for the workflow definition.
        version:
          type: string
          example: "1.0.0"
          description: Version of the workflow definition.
        description:
          type: string
          example: A standard process for document review and approval.
          nullable: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowDefinitionStep'
          description: The sequence of steps that define the workflow.
        isActive:
          type: boolean
          default: true
          description: Whether this workflow definition is currently active and can be used to start new instances.
        createdAt:
          type: string
          format: date-time
          example: '2023-02-01T11:00:00Z'
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: '2023-02-02T14:15:00Z'
          readOnly: true

    WorkflowDefinitionListResponse:
      type: object
      properties:
        workflowDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowDefinition'
        pagination:
          $ref: '#/components/schemas/Pagination'

    CreateWorkflowDefinitionRequest:
      type: object
      required:
        - name
        - version
        - steps
      properties:
        name:
          type: string
          example: NewContentReview
        version:
          type: string
          example: "1.0"
        description:
          type: string
          example: Process for reviewing newly submitted content.
          nullable: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowDefinitionStep'

    UpdateWorkflowDefinitionRequest:
      type: object
      properties:
        name:
          type: string
          example: UpdatedContentReviewV2
        version:
          type: string
          example: "2.1"
        description:
          type: string
          example: Revised process for reviewing updated content, version 2.1.
          nullable: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowDefinitionStep'
          description: The updated sequence of steps. This will replace the existing steps.
        isActive:
          type: boolean
          example: true

    WorkflowInstance:
      type: object
      required:
        - workflowDefinitionId
        - status
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          readOnly: true
        workflowDefinitionId:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
          description: ID of the WorkflowDefinition this instance is based on.
        workflowDefinitionVersion:
          type: string
          example: "1.0.0"
          description: Version of the WorkflowDefinition used for this instance.
          readOnly: true
        status:
          type: string
          enum: [running, completed, failed, suspended, cancelled, pending_retry]
          example: running
          description: Current status of the workflow instance.
        currentStepId:
          type: string
          format: uuid
          example: c1b2a3d4-e5f6-7890-1234-567890abcdef
          nullable: true
          description: ID of the current step the instance is waiting on or executing.
        variables:
          type: object
          additionalProperties: true
          example:
            documentId: "doc-xyz-123"
            approvedBy: null
          description: Key-value pairs of variables associated with this workflow instance.
        startedAt:
          type: string
          format: date-time
          example: '2023-03-01T10:00:00Z'
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: '2023-03-01T10:05:00Z'
          readOnly: true
        endedAt:
          type: string
          format: date-time
          example: '2023-03-02T14:30:00Z'
          nullable: true
          readOnly: true

    WorkflowInstanceListResponse:
      type: object
      properties:
        workflowInstances:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowInstance'
        pagination:
          $ref: '#/components/schemas/Pagination'

    StartWorkflowInstanceRequest:
      type: object
      required:
        - workflowDefinitionId
      properties:
        workflowDefinitionId:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
          description: ID of the WorkflowDefinition to start an instance of.
        variables:
          type: object
          additionalProperties: true
          example:
            documentId: "doc-abc-789"
            submitterUserId: "user-xyz-123"
          description: Initial variables to start the workflow instance with.
          nullable: true

  responses:
    UnauthorizedError:
      description: Unauthorized - Authentication token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missingToken:
              summary: Missing token
              value:
                statusCode: 401
                message: "Authentication token is missing."
            invalidToken:
              summary: Invalid token
              value:
                statusCode: 401
                message: "Authentication token is invalid or expired."

    ForbiddenError:
      description: Forbidden - User does not have permission to access this resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            insufficientPermissions:
              summary: Insufficient permissions
              value:
                statusCode: 403
                message: "You do not have the necessary permissions to perform this action."

    NotFoundError:
      description: Not Found - The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            resourceNotFound:
              summary: Resource not found
              value:
                statusCode: 404
                message: "The requested resource was not found."
                details: "User with ID '12345' does not exist."

    ConflictError:
      description: Conflict - The request could not be completed due to a conflict with the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            duplicateResource:
              summary: Duplicate resource
              value:
                statusCode: 409
                message: "A resource with the specified identifier already exists."
                details: "User with email 'existing@example.com' already exists."
            editConflict:
              summary: Edit conflict
              value:
                statusCode: 409
                message: "The resource was modified by another process. Please refresh and try again."

    InternalServerError:
      description: Internal Server Error - An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            genericError:
              summary: Generic server error
              value:
                statusCode: 500
                message: "An unexpected error occurred. Please try again later or contact support."

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token for authentication. The token should be included in the
        Authorization header as 'Bearer {token}'.
        Example: `Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`
